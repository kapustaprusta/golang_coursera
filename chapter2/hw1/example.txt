			paramName := strings.ToLower(field.Name)
			pureTags := field.Tag[strings.Index(field.Tag, "\"")+1 : strings.LastIndex(field.Tag, "\"")]

			funcBody += fmt.Sprintf("\t// %s\n", field.Name)
			funcBody += fmt.Sprintf("\tif params, isExist := q[\"%s\"]; isExist{\n\t\tp.%s = params[0]\n\t}\n\n", paramName, field.Name)

			for _, tag := range strings.Split(pureTags, ",") {
				if field.Type == "string" {
					tagName := strings.Split(tag, "=")[0]
					switch tagName {
					case "required":
						funcBody += fmt.Sprintf("\tif p.%s == \"\" {\n\t\treturn errors.New(\"%s must me not empty\")\n\t}", field.Name, paramName)
					case "paramname":
						paramName = strings.Split(tag, "=")[1]
					case "enum":
						funcBody += "\tisAllowed := false\n\tallowedVals := []string{"
						allowedVals := strings.Split(strings.Split(tag, "=")[1], "|")
						for valIdx, val := range allowedVals {
							comma := ","
							if len(allowedVals)-1 == valIdx {
								comma = "}"
							}
							funcBody += "\"" + val + "\"" + comma
						}
						funcBody += "\n"

						funcBody += "\tfor _, val := range allowedVals {\n"
						funcBody += fmt.Sprintf("\t\tif p.%s == val {\n\t\t\tisAllowed = true\n\t\t\tbreak\n\t\t}\n\t}\n", field.Name)
						funcBody += fmt.Sprintf("\tif !isAllowed {\n\t\treturn errors.New(\"%s must be one of ", paramName)
						funcBody += "[" + strings.Join(allowedVals, ", ") + "]\")\n\t}"
					case "default":
						funcBody += fmt.Sprintf(`	if p.%s == "" {
		p.%s = "%s"
	}`, field.Name, field.Name, strings.Split(tag, "=")[1])
					case "min":

					default:
						continue
					}
				} else if field.Type == "int" {

				}

				funcBody += "\n\n"
			}





				funcBody := ""
	if funcBody != "" {
		fmt.Fprintf(w, `func validate%s(q map[string][]string, p *%s) error {
%s	return nil
}

`, s.Name, s.Name, funcBody)

		validators[s.Name] = "validate" + s.Name
	}